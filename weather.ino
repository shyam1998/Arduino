#include "DHT.h"
#define DHTPIN D3
#include <Adafruit_GFX.h>
#include <ArduinoJson.h>
//#include <ESP8266WiFi.h>
//#include <ESP8266HTTPClient.h>
#include <Adafruit_SSD1306.h>
#define OLED_RESET 4
Adafruit_SSD1306 display(OLED_RESET);

DynamicJsonBuffer jsonBuffer;
DHT dht;
int pop = 70;
float humidity , temperature;
const unsigned char intro [] PROGMEM = {
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x18, 0xc0, 0x00, 0x00, 0xdd, 0x80, 0x00, 0x0c, 0x00, 0x00, 0x3e, 0x03, 0x00, 0x76, 0x00, 0x00, 
  0x1d, 0xc0, 0x00, 0x00, 0xdd, 0x80, 0x00, 0xcc, 0x00, 0x00, 0x3f, 0x03, 0x00, 0x66, 0x00, 0x00, 
  0x0d, 0x80, 0x00, 0x00, 0xdd, 0x80, 0x00, 0xcc, 0x00, 0x00, 0x33, 0x00, 0x00, 0x60, 0x00, 0x00, 
  0x0f, 0x9e, 0x6c, 0xf0, 0xdf, 0xbc, 0x79, 0xef, 0x9e, 0x38, 0x37, 0x3b, 0x3c, 0xf6, 0xf9, 0xf0, 
  0x07, 0x1e, 0x6c, 0xe0, 0xff, 0x36, 0x6d, 0xef, 0x9b, 0x38, 0x3e, 0x3b, 0x36, 0xf6, 0xf9, 0xf0, 
  0x07, 0x33, 0x6c, 0xc0, 0xf7, 0x3e, 0x1c, 0xcd, 0xbf, 0x30, 0x3f, 0x33, 0x3e, 0x66, 0xc9, 0xb0, 
  0x07, 0x33, 0x6c, 0xc0, 0x77, 0x3e, 0x7c, 0xcd, 0xbf, 0x20, 0x33, 0x23, 0x3e, 0x66, 0xc9, 0xb0, 
  0x07, 0x33, 0x6c, 0xc0, 0x77, 0x30, 0xcc, 0xcd, 0x90, 0x20, 0x37, 0x23, 0x30, 0x66, 0xc9, 0xb0, 
  0x07, 0x1e, 0x7c, 0xc0, 0x77, 0x3e, 0xfc, 0xed, 0x9f, 0x20, 0x3f, 0x23, 0x3e, 0x66, 0xc9, 0xf0, 
  0x02, 0x1c, 0x7c, 0xc0, 0x63, 0x1c, 0x6c, 0xed, 0x8e, 0x20, 0x3e, 0x23, 0x1c, 0x66, 0xc8, 0xb0, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xb0, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xf0, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe0, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x03, 0x80, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x90, 0x00, 0x00, 0x0f, 0xe0, 0x00, 0x00, 0x20, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x12, 0xb0, 0x00, 0x00, 0x1f, 0xf8, 0x00, 0x00, 0x20, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x12, 0xa0, 0x00, 0x00, 0x3f, 0xfc, 0x00, 0x00, 0x20, 0x00, 
  0x00, 0x00, 0x01, 0xf0, 0x00, 0x00, 0x1b, 0xe6, 0x00, 0x00, 0x7f, 0xfc, 0x00, 0x00, 0x20, 0x00, 
  0x00, 0x00, 0x07, 0xfc, 0x00, 0x00, 0x0f, 0xfc, 0x00, 0x00, 0x7f, 0xfe, 0x00, 0x00, 0x20, 0x00, 
  0x00, 0x00, 0x0f, 0xfe, 0x00, 0x00, 0x4e, 0x19, 0x00, 0x00, 0xff, 0xfe, 0x00, 0x20, 0x00, 0x20, 
  0x00, 0x00, 0x0f, 0xfe, 0x00, 0x00, 0x2c, 0x0e, 0x00, 0x00, 0xff, 0xff, 0x00, 0x30, 0x00, 0x60, 
  0x00, 0x00, 0x1f, 0xff, 0x00, 0x00, 0x38, 0x0e, 0x00, 0x00, 0xff, 0xff, 0x00, 0x18, 0x00, 0x60, 
  0x00, 0x00, 0x1f, 0xff, 0x00, 0x00, 0x18, 0x04, 0x00, 0x01, 0xff, 0xff, 0x00, 0x18, 0x78, 0x40, 
  0x00, 0x00, 0x3f, 0xff, 0x00, 0x00, 0xd8, 0x0e, 0x80, 0x07, 0xff, 0xff, 0x00, 0x01, 0xfc, 0x00, 
  0x00, 0x07, 0xbf, 0xff, 0x80, 0x00, 0x78, 0x1f, 0x80, 0x0f, 0xff, 0xff, 0x00, 0x03, 0xfe, 0x00, 
  0x00, 0x0f, 0xff, 0xff, 0x80, 0x00, 0x38, 0x31, 0xc0, 0x0f, 0xff, 0xff, 0x80, 0x03, 0xff, 0x00, 
  0x00, 0x1f, 0xff, 0xff, 0x80, 0x00, 0x18, 0x60, 0xc0, 0x1f, 0xff, 0xff, 0x80, 0x07, 0xff, 0x00, 
  0x00, 0x3f, 0xff, 0xff, 0x80, 0x00, 0x18, 0xc0, 0x60, 0x1f, 0xff, 0xff, 0xc0, 0x07, 0xff, 0x80, 
  0x00, 0x3f, 0xff, 0xff, 0x80, 0x00, 0x7c, 0xc0, 0x20, 0x1f, 0xff, 0xff, 0xc0, 0x07, 0xff, 0x80, 
  0x01, 0xff, 0xff, 0xff, 0x80, 0x00, 0x0f, 0x80, 0x20, 0x3f, 0xff, 0xff, 0xe0, 0x0f, 0xff, 0x80, 
  0x07, 0xff, 0xff, 0xff, 0x80, 0x06, 0x1f, 0x80, 0x30, 0x3f, 0xff, 0xff, 0xe0, 0x0f, 0xff, 0x80, 
  0x07, 0xff, 0xff, 0xff, 0x00, 0x0f, 0x30, 0x00, 0x30, 0x3f, 0xf7, 0xff, 0xe1, 0xcf, 0xff, 0x9e, 
  0x0f, 0xff, 0xff, 0xff, 0x00, 0x19, 0xe0, 0x00, 0x30, 0x1f, 0xef, 0xff, 0xf1, 0xcf, 0xff, 0x9e, 
  0x0f, 0xff, 0xff, 0xff, 0x80, 0x31, 0xc0, 0x00, 0x30, 0x1f, 0xdb, 0xff, 0xf0, 0x0f, 0xff, 0x80, 
  0x1f, 0xff, 0xff, 0xff, 0xc0, 0x23, 0x00, 0x00, 0x30, 0x1f, 0xdb, 0xdf, 0xe0, 0x0f, 0xff, 0x80, 
  0x1f, 0xff, 0xff, 0xff, 0xe0, 0x26, 0x00, 0x00, 0x30, 0x0f, 0xfb, 0x3f, 0xe0, 0x07, 0xff, 0x80, 
  0x1f, 0xff, 0xff, 0xff, 0xe0, 0x64, 0x00, 0x00, 0x30, 0x0f, 0xdb, 0x6f, 0xe0, 0x07, 0xff, 0x80, 
  0x1f, 0xff, 0xff, 0xff, 0xf0, 0x6c, 0x00, 0x00, 0x18, 0x07, 0xc0, 0xff, 0xc0, 0x07, 0xff, 0x00, 
  0x1f, 0xff, 0xff, 0xff, 0xf0, 0x28, 0x00, 0x00, 0x08, 0x03, 0xc6, 0xff, 0x80, 0x03, 0xff, 0x00, 
  0x1f, 0xff, 0xff, 0xff, 0xf0, 0x68, 0x00, 0x00, 0x0c, 0x00, 0x26, 0x40, 0x00, 0x01, 0xfe, 0x00, 
  0x1f, 0xff, 0xff, 0xff, 0xf0, 0x48, 0x00, 0x00, 0x04, 0x00, 0x6e, 0x00, 0x00, 0x08, 0xfc, 0x40, 
  0x1f, 0xff, 0xff, 0xff, 0xf0, 0xc8, 0x00, 0x00, 0x04, 0x00, 0x6e, 0x00, 0x00, 0x18, 0x00, 0x60, 
  0x0f, 0xff, 0xff, 0xff, 0xe0, 0x8c, 0x00, 0x00, 0x0c, 0x00, 0x64, 0x80, 0x00, 0x30, 0x00, 0x60, 
  0x0f, 0xff, 0xff, 0xff, 0xe0, 0x8c, 0x00, 0x00, 0x0c, 0x00, 0x61, 0x80, 0x00, 0x30, 0x00, 0x20, 
  0x07, 0xff, 0xff, 0xff, 0xc0, 0xc6, 0x00, 0x00, 0x08, 0x00, 0x01, 0x80, 0x00, 0x00, 0x20, 0x00, 
  0x03, 0xff, 0xff, 0xff, 0xc0, 0x47, 0x00, 0x00, 0x18, 0x00, 0x19, 0x80, 0x00, 0x00, 0x20, 0x00, 
  0x01, 0xff, 0xff, 0xff, 0x00, 0x7f, 0xff, 0xff, 0xf0, 0x00, 0x19, 0x80, 0x00, 0x00, 0x20, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xff, 0xff, 0xe0, 0x00, 0x19, 0x00, 0x00, 0x00, 0x20, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x20, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};
const unsigned char cloud [] PROGMEM = {
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0x80, 0x00, 0x00, 0x7f, 0xe0, 
  0x00, 0x00, 0xff, 0xf0, 0x00, 0x00, 0xff, 0xf0, 0x00, 0x01, 0xff, 0xf8, 0x00, 0x7f, 0xff, 0xf8, 
  0x00, 0xff, 0xff, 0xf8, 0x01, 0xff, 0xff, 0xf8, 0x0f, 0xff, 0xff, 0xf8, 0x3f, 0xff, 0xff, 0xf8, 
  0x7f, 0xff, 0xff, 0xf8, 0xff, 0xff, 0xff, 0xfc, 0xff, 0xff, 0xff, 0xfe, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x7f, 0xff, 0xff, 0xfe, 
  0x3f, 0xff, 0xff, 0xfe, 0x1f, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
   };
const unsigned char snow [] PROGMEM = {
  0x00, 0x00, 0x1f, 0x80, 0x00, 0x00, 0x7f, 0xe0, 0x00, 0x00, 0xff, 0xf0, 0x00, 0x3d, 0xff, 0xf8, 
  0x00, 0xff, 0xff, 0xf8, 0x07, 0xff, 0xff, 0xf8, 0x3f, 0xff, 0xff, 0xf8, 0x7f, 0xff, 0xff, 0xf8, 
  0xff, 0xff, 0xff, 0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x7f, 0xff, 0xff, 0xfe, 
  0x3f, 0xff, 0xff, 0xfe, 0x0f, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x80, 0x00, 
  0x00, 0x09, 0x90, 0x00, 0x00, 0x0f, 0xf0, 0x00, 0x00, 0x03, 0xc0, 0x00, 0x00, 0x0f, 0xf0, 0x00, 
  0x00, 0x09, 0x90, 0x00, 0x00, 0x01, 0x80, 0x0
   };
const unsigned char rain [] PROGMEM = {
  0x00, 0x07, 0xf0, 0x00, 0x00, 0x1f, 0xfe, 0x00, 0x00, 0x3f, 0xff, 0x00, 0x00, 0x7f, 0xff, 0x80, 
  0x00, 0xff, 0xff, 0xc0, 0x01, 0xff, 0xff, 0xc0, 0x01, 0xff, 0xff, 0xe0, 0x03, 0xff, 0xff, 0xe0, 
  0x0f, 0xff, 0xff, 0xf0, 0x3f, 0xff, 0xff, 0xf0, 0x3f, 0xff, 0xff, 0xf0, 0x7f, 0xff, 0xff, 0xf0, 
  0x7f, 0xff, 0xff, 0xfc, 0xff, 0xff, 0xff, 0xfe, 0xff, 0xff, 0xff, 0xfe, 0xff, 0xf7, 0xff, 0xff, 
  0xff, 0xeb, 0xff, 0xff, 0x7f, 0xdb, 0xff, 0xff, 0x7f, 0xbb, 0xe7, 0xfe, 0x3f, 0xbb, 0xdb, 0xfe, 
  0x1f, 0xd0, 0xbb, 0xfc, 0x0f, 0xc3, 0x7b, 0xf8, 0x00, 0x67, 0x30, 0x00, 0x00, 0xe7, 0x00, 0x00, 
  0x00, 0xe6, 0x00, 0x00, 0x00, 0xe0, 0xc0, 0x00, 0x00, 0xc0, 0xc0, 0x00, 0x00, 0x09, 0xc0, 0x00, 
  0x00, 0x1d, 0xc0, 0x00, 0x00, 0x3c, 0x80, 0x00, 0x00, 0x38, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00
   };
const unsigned char sun [] PROGMEM = {
  0x00, 0x01, 0x80, 0x00, 0x00, 0x01, 0x80, 0x00, 0x00, 0x01, 0x80, 0x00, 0x00, 0x01, 0x80, 0x00, 
  0x0e, 0x00, 0x00, 0x70, 0x07, 0x00, 0x00, 0xe0, 0x01, 0x0f, 0xf0, 0x80, 0x00, 0x3f, 0xfc, 0x00, 
  0x00, 0x7f, 0xfe, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0xff, 0xff, 0x00, 0x01, 0xff, 0xff, 0x80, 
  0xf1, 0xff, 0xff, 0x9f, 0xf1, 0xff, 0xff, 0x8f, 0x01, 0xff, 0xff, 0x80, 0x00, 0xff, 0xff, 0x00, 
  0x00, 0xff, 0xff, 0x00, 0x00, 0x7f, 0xfe, 0x00, 0x00, 0x3f, 0xfc, 0x00, 0x01, 0x0f, 0xf0, 0x80, 
  0x07, 0x00, 0x00, 0xe0, 0x0e, 0x00, 0x00, 0x70, 0x00, 0x01, 0x80, 0x00, 0x00, 0x01, 0x80, 0x00, 
  0x00, 0x01, 0x80, 0x00, 0x00, 0x01, 0x80, 0x0
};


  void setup()   {       
  display.clearDisplay();
  Serial.begin(9600);
  dht.setup(2);
  display.begin(SSD1306_SWITCHCAPVCC, 0x3C);
}
  void loop()  {
    display.display();
    delay(dht.getMinimumSamplingPeriod());
    display.clearDisplay();
    humidity = dht.getHumidity();
    temperature = dht.getTemperature();  
    execute();
  }

  void execute() {
    display.clearDisplay();
    show_intro_image();
    display.display();
    delay(3000);
    display.clearDisplay();
    showLocation();
    display.display();
    delay(3000);
    display.clearDisplay();
    showTemperature();
    display.display();
    delay(3000);
    display.clearDisplay();
    showFeels_temp();
    display.display();
    delay(3000);
    display.clearDisplay();
    show_chance_of_prep();
    display.display();
    delay(3000);
    display.clearDisplay();
    showAQI();
    display.display();
    delay(3000);
    display.clearDisplay();
    show_temp_for_tom();
    display.display();
    delay(3000);
  
  }

  void showAQI() {
    transition();
    display.print("..... .");
    display.setTextSize(2);
    display.setTextColor(WHITE);
    display.setCursor(0 , 0);
    display.println("AirQuality");
    display.setTextSize(3);
    display.setCursor(32 , 26);
    display.println(145);    
  }
  
  void showLocation() {
  transition();
  display.print(" ......");
  display.setTextSize(2);
  display.setTextColor(WHITE);
  display.setCursor(20,0);
  display.println("LOCATION");
  display.setTextSize(2);
  display.setTextColor(WHITE);
  display.setCursor(20,32);
  display.println("Chennai");
  
 }

 void showTemperature() {
    transition();
    display.print(". .....");
    display.setTextSize(2);//Print the response payload
    display.setTextColor(WHITE);
    display.setCursor(20,3); //(column , row)
    display.println("TODAY");
    sunbitmap();
    display.setCursor(26,28);
    display.setTextSize(4);//Print the response payload
    display.setTextColor(WHITE);
    display.println(int(temperature));
    display.setCursor(70,14);
    display.print((char)248); //ascii-value of 248
    display.setCursor(92,28);
    display.print("C");
  }
  void showFeels_temp() {
    transition();
    display.print(".. ....");
    display.setTextSize(2);   //Print the response payload
    display.setTextColor(WHITE);
    display.setCursor(0,0); //(column , row)
    display.println("Feels Like");
    display.setCursor(18,28);
    display.setTextSize(4);   //Print the response payload
    display.setTextColor(WHITE);
    display.println(int(temperature));
    display.setCursor(60,14);
    display.print((char)248);  //ascii-value of 248
    display.setCursor(82,28);
    display.print("C");
  } 
   void show_chance_of_prep() {
    transition();
    display.print("... ...");
    display.setTextSize(2);//Print the response payload
    display.setTextColor(WHITE);
    display.setCursor(10,0); //(column , row)
    display.println("CHANCE OF");
    display.setCursor(20,16);
    display.println("RAINFALL");
    display.setTextSize(2);
    display.setCursor(40 , 38);
    display.print(pop);
    display.setCursor(64, 28);
    display.print((char)248);
    display.setCursor(72,36);
    display.print("/");
    display.setCursor(76, 42);
    display.print((char)248);
  } 
   void show_temp_for_tom() {
    transition();
    display.print("...... ");
    display.setTextSize(2); //Print the response payload
    display.setTextColor(WHITE);
    display.setCursor(20,0); //(column , row)
    display.println("TOMORROW");
    display.setCursor(26,28);
    display.setTextSize(4); //Print the response payload
    display.setTextColor(WHITE);
    display.println(int(temperature));
    display.setCursor(70,14);
    display.print((char)248); //ascii-value of 248
    display.setCursor(92,28);
    display.print("C");
  }

  void transition() {
    display.setTextSize(1); //Print the response payload
    display.setTextColor(WHITE);
    display.setCursor(44,54); //(column , row)
  }

  void show_intro_image() {
    display.drawBitmap(0 , 0 , intro , 128 , 64 , WHITE);
  }
  void cloudbitmap() {
    display.drawBitmap(86 , -6 , cloud , 32 , 32 , WHITE);
  }
  void snowbitmap() {
    display.drawBitmap(86 , 0 , snow , 32 , 22 , WHITE);
  }
  void rainbitmap() {
    display.drawBitmap(86 , -10 , rain , 32 , 32 , WHITE);
  }
  void sunbitmap() {
    display.drawBitmap(86 , -3 , sun , 32 , 26 , WHITE);
  }

 //  void connect_to_wifi() {
//   const char* ssid = "Shyam";
//   const char* password = "8056116667";
//   WiFi.begin(ssid, password);
//   
//   while (WiFi.status() != WL_CONNECTED) {
// 
//    delay(1000);
//    Serial.print("Connecting..");
// 
//  }
//   
//    
//  } 
  
  /*void fetch_data() {
      if (WiFi.status() == WL_CONNECTED) { //Check WiFi connection status
 
      HTTPClient http;  //Declare an object of class HTTPClient
 
      http.begin("http://api.wunderground.com/api/3dc4e1c2467102af/conditions/q/India/Chennai.json");  //Specify request destination
      int httpCode = http.GET();  //Send the request
 
      if (httpCode > 0) { //Check the returning code
        display.clear();
        String input = http.getString();  //Get the request response payload
        JsonObject& root = jsonBuffer.parseObject(input);
        const char* location = root[String("current_observation")][String("display_location")][String("city")];
        float today_temp_c = root[String("current_observation")][String("temp_c")];
        const char* feels_like_c = root[String("current_observation")][String("feelslike_c")];
        display.setTextSize(2);
        display.setTextColor(WHITE);
        display.setCursor(0,64);
        display.println("LOCATION")
        display.setCursor(32,64);
        display.setTextSize(4);
        display.println(location);
        delay(3000);                  
    }
      http.end();   //Close connection
   }
  delay(2000);    //Send a request every 30 seconds
  }*/

